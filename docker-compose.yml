services:
  traefik:
    image: traefik:v3.0
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=webmts_webmts-network"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - webmts-network
      
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    container_name: webmts-redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
    ports:
      - "6379:6379"
    networks:
      - webmts-network

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/AuthService.Client/Dockerfile
    container_name: webmts-auth-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=auth-db;Database=auth_db;Username=postgres;Password=postgres
    ports:
      - "8081:8080"  # Doğrudan erişim için port mapping ekleyelim
    depends_on:
      auth-db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-router.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.routers.auth.service=auth-svc"
      - "traefik.http.services.auth-svc.loadbalancer.server.port=8080"
    networks:
      - webmts-network

  auth-db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_db
    ports:
        - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d auth_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - webmts-network

  # Customer Service
  customer-service:
    build:
      context: ./services/customer-service/Webmts.CustomerService
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=customer-db;Database=customer_db;Username=postgres;Password=postgres
    depends_on:
      - customer-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.customer.rule=PathPrefix(`/api/customer`)"
      - "traefik.http.services.customer.loadbalancer.server.port=8080"
    networks:
      - webmts-network

  customer-db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=customer_db
    volumes:
      - customer-db-data:/var/lib/postgresql/data
    networks:
      - webmts-network

  # Transaction Service
  transaction-service:
    build:
      context: ./services/transaction-service/Webmts.TransactionService
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=transaction-db;Database=transaction_db;Username=postgres;Password=postgres
    depends_on:
      - transaction-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transaction.rule=PathPrefix(`/api/transaction`)"
      - "traefik.http.services.transaction.loadbalancer.server.port=8080"
    networks:
      - webmts-network

  transaction-db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=transaction_db
    volumes:
      - transaction-db-data:/var/lib/postgresql/data
    networks:
      - webmts-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service/Webmts.NotificationService
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=notification-db;Database=notification_db;Username=postgres;Password=postgres
    depends_on:
      - notification-db
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification.rule=PathPrefix(`/api/notification`)"
      - "traefik.http.services.notification.loadbalancer.server.port=8080"
    networks:
      - webmts-network

  notification-db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=notification_db
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    networks:
      - webmts-network

  # RabbitMQ for async communication
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
    networks:
      - webmts-network

networks:
  webmts-network:
    name: webmts_webmts-network
    driver: bridge
#    external: true

volumes:
  auth-db-data:
  customer-db-data:
  transaction-db-data:
  notification-db-data: